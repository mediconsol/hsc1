name: Deploy to Railway

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4.5'
        bundler-cache: true
        working-directory: ./backend
        
    - name: Install Railway CLI
      run: |
        echo "📦 Installing Railway CLI..."
        npm install -g @railway/cli
        echo "🔍 Verifying Railway CLI installation..."
        railway --help | head -5 || railway help | head -5 || echo "Railway CLI installed"
        echo "✅ Railway CLI ready for use"
      
    - name: Validate Backend Environment
      run: |
        echo "Validating backend configuration..."
        if [ ! -f "config/master.key" ]; then
          echo "❌ config/master.key not found"
          exit 1
        fi
        echo "✅ Backend validation passed"
        echo "📋 Backend files:"
        ls -la config/ | head -10
      working-directory: ./backend

    - name: Railway Authentication & Project Setup
      run: |
        echo "🔐 Authenticating with Railway..."
        if [ -z "$RAILWAY_TOKEN" ]; then
          echo "❌ RAILWAY_TOKEN not found in secrets"
          echo "Please set RAILWAY_TOKEN in GitHub repository secrets"
          exit 1
        fi
        
        echo "🔍 Checking Railway authentication..."
        railway login --token $RAILWAY_TOKEN || {
          echo "❌ Railway authentication failed"
          exit 1
        }
        
        echo "📋 Railway projects:"
        railway list || railway projects || echo "No projects found or authentication issue"
        
        # Railway 프로젝트 연결 시도 (프로젝트 ID가 설정된 경우)
        if [ -n "$RAILWAY_PROJECT_ID" ]; then
          echo "🔗 Linking to Railway project: $RAILWAY_PROJECT_ID"
          railway link $RAILWAY_PROJECT_ID || {
            echo "⚠️ Failed to link to project, continuing anyway..."
          }
        else
          echo "ℹ️ RAILWAY_PROJECT_ID not set, manual project linking required"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

    - name: Deploy Backend to Railway
      run: |
        echo "🚀 Attempting Backend Service deployment..."
        
        # 프로젝트 연결 상태 확인
        if railway status; then
          echo "✅ Railway project connected"
        else
          echo "❌ No Railway project connected"
          echo "Please create a Railway project and set up the connection"
          echo "Visit: https://railway.app to create a project"
          echo "Then set RAILWAY_PROJECT_ID in GitHub secrets"
          exit 1
        fi
        
        # 서비스 배포 시도
        echo "📤 Deploying backend service..."
        railway up --detach || {
          echo "❌ Backend deployment failed"
          echo "📋 Railway status:"
          railway status || true
          echo "📋 Available services:"
          railway service || railway services || echo "No services found"
          exit 1
        }
        
        echo "✅ Backend deployment initiated successfully"
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      working-directory: ./backend

    - name: Wait for Backend Deployment
      run: |
        echo "⏳ Waiting for backend deployment to complete..."
        sleep 30
        # Health check will be performed after both services are deployed

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4.5'
        bundler-cache: true
        working-directory: ./frontend
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend
      
    - name: Build CSS
      run: npm run build:css
      working-directory: ./frontend

    - name: Validate Frontend Environment
      run: |
        echo "Validating frontend configuration..."
        if [ ! -f "config/master.key" ]; then
          echo "❌ config/master.key not found"
          exit 1
        fi
        echo "✅ Frontend validation passed"
      working-directory: ./frontend
      
    - name: Install Railway CLI
      run: |
        echo "📦 Installing Railway CLI..."
        npm install -g @railway/cli
        echo "🔍 Verifying Railway CLI installation..."
        railway --help | head -5 || railway help | head -5 || echo "Railway CLI installed"
        echo "✅ Railway CLI ready for use"

    - name: Railway Authentication & Project Setup
      run: |
        echo "🔐 Authenticating with Railway..."
        railway login --token $RAILWAY_TOKEN || {
          echo "❌ Railway authentication failed"
          exit 1
        }
        
        # Railway 프로젝트 연결 (백엔드에서 이미 설정된 프로젝트 사용)
        if [ -n "$RAILWAY_PROJECT_ID" ]; then
          echo "🔗 Linking to Railway project: $RAILWAY_PROJECT_ID"
          railway link $RAILWAY_PROJECT_ID || {
            echo "❌ Failed to link to project"
            exit 1
          }
        else
          echo "❌ RAILWAY_PROJECT_ID not set"
          exit 1
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      
    - name: Deploy Frontend to Railway
      run: |
        echo "🚀 Attempting Frontend Service deployment..."
        
        # 프로젝트 연결 상태 재확인
        if ! railway status; then
          echo "❌ Railway project not connected"
          exit 1
        fi
        
        # 프론트엔드 서비스 배포
        echo "📤 Deploying frontend service..."
        railway up --detach || {
          echo "❌ Frontend deployment failed"
          echo "📋 Railway status:"
          railway status || true
          exit 1
        }
        
        echo "✅ Frontend deployment initiated successfully"
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      working-directory: ./frontend

    - name: Wait for Frontend Deployment
      run: |
        echo "⏳ Waiting for frontend deployment to complete..."
        sleep 30

  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
    
    steps:
    - name: Wait for Services to Start
      run: |
        echo "⏳ Waiting for services to fully start..."
        sleep 60

    - name: Health Check Backend
      run: |
        echo "🔍 Checking backend health..."
        # 실제 배포에서는 BACKEND_URL을 환경변수로 설정
        # curl -f https://your-backend.railway.app/up || exit 1
        echo "Backend health check skipped (add actual URL after deployment)"

    - name: Health Check Frontend
      run: |
        echo "🔍 Checking frontend health..."
        # 실제 배포에서는 FRONTEND_URL을 환경변수로 설정
        # curl -f https://your-frontend.railway.app/ || exit 1
        echo "Frontend health check skipped (add actual URL after deployment)"

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, health-check]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success' && (needs.health-check.result == 'success' || needs.health-check.result == 'skipped')
      run: |
        echo "🎉 Deployment successful!"
        echo "✅ Backend deployed to Railway"
        echo "✅ Frontend deployed to Railway"
        echo "🔍 Health checks completed"
        
    - name: Notify Failure  
      if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure' || needs.health-check.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Backend status: ${{ needs.deploy-backend.result }}"
        echo "Frontend status: ${{ needs.deploy-frontend.result }}"
        echo "Health check status: ${{ needs.health-check.result }}"
        echo "Check logs for details"
        exit 1