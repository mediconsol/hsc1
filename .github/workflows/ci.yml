name: Hospital Management System CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  RUBY_VERSION: '3.2'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  backend-tests:
    name: Backend Tests & Security
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hospital_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        working-directory: ./backend

    - name: Install dependencies
      run: |
        cd backend
        bundle install --jobs 4 --retry 3

    - name: Setup database
      run: |
        cd backend
        cp config/database.yml.ci config/database.yml
        bundle exec rails db:create db:schema:load
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hospital_test

    - name: Run RuboCop
      run: |
        cd backend
        bundle exec rubocop --parallel

    - name: Run Brakeman security scan
      run: |
        cd backend
        bundle exec brakeman --no-pager --format json --output brakeman-report.json
        bundle exec brakeman --no-pager

    - name: Run model tests
      run: |
        cd backend
        bundle exec rails test test/models/
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hospital_test

    - name: Run controller tests
      run: |
        cd backend
        bundle exec rails test test/controllers/
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hospital_test

    - name: Run integration tests
      run: |
        cd backend
        bundle exec rails test test/integration/
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hospital_test

    - name: Run performance tests
      run: |
        cd backend
        bundle exec rails test test/performance/
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hospital_test

    - name: Generate test coverage report
      run: |
        cd backend
        bundle exec rails test:coverage
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hospital_test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: brakeman-report
        path: backend/brakeman-report.json

  frontend-tests:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        working-directory: ./frontend

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Ruby dependencies
      run: |
        cd frontend
        bundle install --jobs 4 --retry 3

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint

    - name: Run CSS/SCSS linting
      run: |
        cd frontend
        npm run lint:css

    - name: Run JavaScript tests
      run: |
        cd frontend
        npm test

    - name: Check for security vulnerabilities
      run: |
        cd frontend
        npm audit --audit-level moderate

    - name: Build assets
      run: |
        cd frontend
        npm run build
      env:
        NODE_ENV: production

    - name: Run Rails system tests
      run: |
        cd frontend
        bundle exec rails test:system
      env:
        RAILS_ENV: test

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: hospital-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: hospital-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml build
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        docker-compose -f docker-compose.test.yml ps
        docker-compose -f docker-compose.test.yml logs
        docker-compose -f docker-compose.test.yml down

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hospital_benchmark
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        working-directory: ./backend

    - name: Install dependencies
      run: |
        cd backend
        bundle install --jobs 4 --retry 3

    - name: Setup benchmark database
      run: |
        cd backend
        cp config/database.yml.ci config/database.yml
        bundle exec rails db:create db:schema:load
        bundle exec rails db:seed
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hospital_benchmark

    - name: Run performance benchmarks
      run: |
        cd backend
        bundle exec rails test test/performance/ --verbose
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hospital_benchmark

    - name: Generate performance report
      run: |
        cd backend
        bundle exec rails runner scripts/generate_performance_report.rb
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hospital_benchmark

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: backend/tmp/performance-report.html

  deployment-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push backend
        docker build -t $ECR_REGISTRY/hospital-backend:$IMAGE_TAG backend/
        docker push $ECR_REGISTRY/hospital-backend:$IMAGE_TAG

        # Build and push frontend
        docker build -t $ECR_REGISTRY/hospital-frontend:$IMAGE_TAG frontend/
        docker push $ECR_REGISTRY/hospital-frontend:$IMAGE_TAG

    - name: Deploy to ECS Staging
      run: |
        aws ecs update-service --cluster hospital-staging --service backend --force-new-deployment
        aws ecs update-service --cluster hospital-staging --service frontend --force-new-deployment

    - name: Wait for deployment
      run: |
        aws ecs wait services-stable --cluster hospital-staging --services backend frontend

    - name: Run smoke tests
      run: |
        cd backend
        bundle exec ruby scripts/smoke_tests.rb https://staging-api.hospital.com
        cd ../frontend
        npm run test:smoke https://staging.hospital.com

  deployment-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, security-audit]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Manual approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: admin-team
        minimum-approvals: 2
        issue-title: "Deploy Hospital Management System to Production"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Production deployment would go here"
        # Similar to staging but with production environment